import {
  require_prop_types
} from "./chunk-2F3E2BRM.js";
import {
  require_react_dom
} from "./chunk-VZNFGQQK.js";
import {
  require_react
} from "./chunk-JYIBH44A.js";
import {
  __toESM
} from "./chunk-EH7DNDLS.js";

// node_modules/react-inner-image-zoom/es/InnerImageZoom/InnerImageZoom.js
var import_react4 = __toESM(require_react());
var import_prop_types4 = __toESM(require_prop_types());

// node_modules/react-inner-image-zoom/es/InnerImageZoom/components/Image.js
var import_react = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var Image = function Image2(_ref) {
  var src = _ref.src, sources = _ref.sources, width = _ref.width, height = _ref.height, hasSpacer = _ref.hasSpacer, imgAttributes = _ref.imgAttributes, isZoomed = _ref.isZoomed, fadeDuration = _ref.fadeDuration;
  var createSpacer = width && height && hasSpacer;
  return import_react.default.createElement("div", {
    style: {
      paddingTop: createSpacer ? height / width * 100 + "%" : null
    }
  }, sources && sources.length > 0 ? import_react.default.createElement("picture", null, sources.map(function(source, i) {
    return import_react.default.createElement(import_react.Fragment, {
      key: i
    }, source.srcSet && import_react.default.createElement("source", source));
  }), import_react.default.createElement("img", _extends({}, imgAttributes, {
    className: "iiz__img " + (imgAttributes.className || "") + " " + (isZoomed ? "iiz__img--hidden" : "") + " " + (createSpacer ? "iiz__img--abs" : ""),
    style: {
      transition: "opacity 0ms linear " + (isZoomed ? fadeDuration : 0) + "ms, visibility 0ms linear " + (isZoomed ? fadeDuration : 0) + "ms"
    },
    src,
    width,
    height
  }))) : import_react.default.createElement("img", _extends({}, imgAttributes, {
    className: "iiz__img " + (imgAttributes.className || "") + " " + (isZoomed ? "iiz__img--hidden" : "") + " " + (createSpacer ? "iiz__img--abs" : ""),
    style: {
      transition: "opacity 0ms linear " + (isZoomed ? fadeDuration : 0) + "ms, visibility 0ms linear " + (isZoomed ? fadeDuration : 0) + "ms"
    },
    src,
    width,
    height
  })));
};
Image.propTypes = true ? {
  src: import_prop_types.default.string.isRequired,
  sources: import_prop_types.default.array,
  width: import_prop_types.default.number,
  height: import_prop_types.default.number,
  hasSpacer: import_prop_types.default.bool,
  imgAttributes: import_prop_types.default.object,
  fadeDuration: import_prop_types.default.number,
  isZoomed: import_prop_types.default.bool
} : {};
var Image_default = Image;

// node_modules/react-inner-image-zoom/es/InnerImageZoom/components/ZoomImage.js
var import_react2 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
var ZoomImage = function ZoomImage2(_ref) {
  var src = _ref.src, fadeDuration = _ref.fadeDuration, top = _ref.top, left = _ref.left, isZoomed = _ref.isZoomed, onLoad = _ref.onLoad, onDragStart = _ref.onDragStart, onDragEnd = _ref.onDragEnd, onClose = _ref.onClose, onFadeOut = _ref.onFadeOut;
  return import_react2.default.createElement(import_react2.Fragment, null, import_react2.default.createElement("img", {
    className: "iiz__zoom-img " + (isZoomed ? "iiz__zoom-img--visible" : ""),
    style: {
      top,
      left,
      transition: "opacity " + fadeDuration + "ms linear, visibility " + fadeDuration + "ms linear"
    },
    src,
    onLoad,
    onTouchStart: onDragStart,
    onTouchEnd: onDragEnd,
    onMouseDown: onDragStart,
    onMouseUp: onDragEnd,
    onTransitionEnd: onFadeOut,
    draggable: "false",
    alt: ""
  }), onClose && import_react2.default.createElement("button", {
    className: "iiz__btn iiz__close " + (isZoomed ? "iiz__close--visible" : ""),
    style: {
      transition: "opacity " + fadeDuration + "ms linear, visibility " + fadeDuration + "ms linear"
    },
    onClick: onClose,
    "aria-label": "Zoom Out"
  }));
};
ZoomImage.propTypes = true ? {
  src: import_prop_types2.default.string,
  fadeDuration: import_prop_types2.default.number,
  top: import_prop_types2.default.number,
  left: import_prop_types2.default.number,
  isZoomed: import_prop_types2.default.bool,
  onLoad: import_prop_types2.default.func,
  onDragStart: import_prop_types2.default.func,
  onDragEnd: import_prop_types2.default.func,
  onClose: import_prop_types2.default.func,
  onFadeOut: import_prop_types2.default.func
} : {};
var ZoomImage_default = ZoomImage;

// node_modules/react-inner-image-zoom/es/InnerImageZoom/components/FullscreenPortal.js
var import_react3 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var import_prop_types3 = __toESM(require_prop_types());
var FullscreenPortal = function FullscreenPortal2(_ref) {
  var children = _ref.children;
  var _useState = (0, import_react3.useState)(function() {
    var el = document.createElement("div");
    el.classList.add("iiz__zoom-portal");
    return el;
  }), portal = _useState[0];
  (0, import_react3.useEffect)(function() {
    document.body.appendChild(portal);
    return function() {
      return document.body.removeChild(portal);
    };
  }, [portal]);
  return (0, import_react_dom.createPortal)(children, portal);
};
FullscreenPortal.propTypes = {
  children: import_prop_types3.default.element
};
var FullscreenPortal_default = FullscreenPortal;

// node_modules/react-inner-image-zoom/es/InnerImageZoom/InnerImageZoom.js
var _this = void 0;
var InnerImageZoom = function InnerImageZoom2(_ref) {
  var _ref$moveType = _ref.moveType, moveType = _ref$moveType === void 0 ? "pan" : _ref$moveType, _ref$zoomType = _ref.zoomType, zoomType = _ref$zoomType === void 0 ? "click" : _ref$zoomType, src = _ref.src, sources = _ref.sources, width = _ref.width, height = _ref.height, hasSpacer = _ref.hasSpacer, _ref$imgAttributes = _ref.imgAttributes, imgAttributes = _ref$imgAttributes === void 0 ? {} : _ref$imgAttributes, zoomSrc = _ref.zoomSrc, _ref$zoomScale = _ref.zoomScale, zoomScale = _ref$zoomScale === void 0 ? 1 : _ref$zoomScale, zoomPreload = _ref.zoomPreload, _ref$fadeDuration = _ref.fadeDuration, fadeDuration = _ref$fadeDuration === void 0 ? 150 : _ref$fadeDuration, fullscreenOnMobile = _ref.fullscreenOnMobile, _ref$mobileBreakpoint = _ref.mobileBreakpoint, mobileBreakpoint = _ref$mobileBreakpoint === void 0 ? 640 : _ref$mobileBreakpoint, hideCloseButton = _ref.hideCloseButton, hideHint = _ref.hideHint, className = _ref.className, afterZoomIn = _ref.afterZoomIn, afterZoomOut = _ref.afterZoomOut;
  var img = (0, import_react4.useRef)(null);
  var zoomImg = (0, import_react4.useRef)(null);
  var imgProps = (0, import_react4.useRef)({});
  var _useState = (0, import_react4.useState)(zoomPreload), isActive = _useState[0], setIsActive = _useState[1];
  var _useState2 = (0, import_react4.useState)(false), isTouch = _useState2[0], setIsTouch = _useState2[1];
  var _useState3 = (0, import_react4.useState)(false), isZoomed = _useState3[0], setIsZoomed = _useState3[1];
  var _useState4 = (0, import_react4.useState)(false), isFullscreen = _useState4[0], setIsFullscreen = _useState4[1];
  var _useState5 = (0, import_react4.useState)(false), isDragging = _useState5[0], setIsDragging = _useState5[1];
  var _useState6 = (0, import_react4.useState)(false), isValidDrag = _useState6[0], setIsValidDrag = _useState6[1];
  var _useState7 = (0, import_react4.useState)(false), isFading = _useState7[0], setIsFading = _useState7[1];
  var _useState8 = (0, import_react4.useState)(moveType), currentMoveType = _useState8[0], setCurrentMoveType = _useState8[1];
  var _useState9 = (0, import_react4.useState)(0), left = _useState9[0], setLeft = _useState9[1];
  var _useState10 = (0, import_react4.useState)(0), top = _useState10[0], setTop = _useState10[1];
  var handleMouseEnter = function handleMouseEnter2(e) {
    setIsActive(true);
    setIsFading(false);
    zoomType === "hover" && !isZoomed && handleClick(e);
  };
  var handleTouchStart = function handleTouchStart2() {
    setIsTouch(true);
    setIsFullscreen(getFullscreenStatus(fullscreenOnMobile, mobileBreakpoint));
    setCurrentMoveType("drag");
  };
  var handleClick = function handleClick2(e) {
    if (isZoomed) {
      if (isTouch) {
        hideCloseButton && handleClose(e);
      } else {
        !isValidDrag && zoomOut();
      }
      return;
    }
    isTouch && setIsActive(true);
    if (zoomImg.current) {
      handleLoad({
        target: zoomImg.current
      });
      zoomIn(e.pageX, e.pageY);
    } else {
      imgProps.current.onLoadCallback = zoomIn.bind(_this, e.pageX, e.pageY);
    }
  };
  var handleLoad = function handleLoad2(e) {
    var scaledDimensions = getScaledDimensions(e.target, zoomScale);
    zoomImg.current = e.target;
    zoomImg.current.setAttribute("width", scaledDimensions.width);
    zoomImg.current.setAttribute("height", scaledDimensions.height);
    imgProps.current.scaledDimensions = scaledDimensions;
    imgProps.current.bounds = getBounds(img.current, false);
    imgProps.current.ratios = getRatios(imgProps.current.bounds, scaledDimensions);
    if (imgProps.current.onLoadCallback) {
      imgProps.current.onLoadCallback();
      imgProps.current.onLoadCallback = null;
    }
  };
  var handleMouseMove = function handleMouseMove2(e) {
    var left2 = e.pageX - imgProps.current.offsets.x;
    var top2 = e.pageY - imgProps.current.offsets.y;
    left2 = Math.max(Math.min(left2, imgProps.current.bounds.width), 0);
    top2 = Math.max(Math.min(top2, imgProps.current.bounds.height), 0);
    setLeft(left2 * -imgProps.current.ratios.x);
    setTop(top2 * -imgProps.current.ratios.y);
  };
  var handleDragStart = function handleDragStart2(e) {
    var pageX = typeof e.pageX === "number" ? e.pageX : e.changedTouches[0].pageX;
    var pageY = typeof e.pageY === "number" ? e.pageY : e.changedTouches[0].pageY;
    imgProps.current.offsets = getOffsets(pageX, pageY, zoomImg.current.offsetLeft, zoomImg.current.offsetTop);
    setIsDragging(true);
    if (!isTouch) {
      imgProps.current.eventPosition = {
        x: e.pageX,
        y: e.pageY
      };
    }
  };
  var handleDragMove = (0, import_react4.useCallback)(function(e) {
    e.stopPropagation();
    var pageX = typeof e.pageX === "number" ? e.pageX : e.changedTouches[0].pageX;
    var pageY = typeof e.pageY === "number" ? e.pageY : e.changedTouches[0].pageY;
    var left2 = pageX - imgProps.current.offsets.x;
    var top2 = pageY - imgProps.current.offsets.y;
    left2 = Math.max(Math.min(left2, 0), (imgProps.current.scaledDimensions.width - imgProps.current.bounds.width) * -1);
    top2 = Math.max(Math.min(top2, 0), (imgProps.current.scaledDimensions.height - imgProps.current.bounds.height) * -1);
    setLeft(left2);
    setTop(top2);
  }, []);
  var handleDragEnd = function handleDragEnd2(e) {
    setIsDragging(false);
    if (!isTouch) {
      var moveX = Math.abs(e.pageX - imgProps.current.eventPosition.x);
      var moveY = Math.abs(e.pageY - imgProps.current.eventPosition.y);
      setIsValidDrag(moveX > 5 || moveY > 5);
    }
  };
  var handleMouseLeave = function handleMouseLeave2(e) {
    currentMoveType === "drag" && isZoomed ? handleDragEnd(e) : handleClose(e);
  };
  var handleClose = function handleClose2(e) {
    if (!(!isTouch && e.target.classList.contains("iiz__close"))) {
      if (!isZoomed || isFullscreen || !fadeDuration) {
        handleFadeOut({}, true);
      } else {
        setIsFading(true);
      }
    }
    zoomOut();
  };
  var handleFadeOut = function handleFadeOut2(e, noTransition) {
    if (noTransition || e.propertyName === "opacity" && img.current.contains(e.target)) {
      if (zoomPreload && isTouch || !zoomPreload) {
        zoomImg.current = null;
        imgProps.current = getDefaults();
        setIsActive(false);
      }
      setIsTouch(false);
      setIsFullscreen(false);
      setCurrentMoveType(moveType);
      setIsFading(false);
    }
  };
  var initialMove = function initialMove2(pageX, pageY) {
    imgProps.current.offsets = getOffsets(window.pageXOffset, window.pageYOffset, -imgProps.current.bounds.left, -imgProps.current.bounds.top);
    handleMouseMove({
      pageX,
      pageY
    });
  };
  var initialDrag = function initialDrag2(pageX, pageY) {
    var initialPageX = (pageX - (window.pageXOffset + imgProps.current.bounds.left)) * -imgProps.current.ratios.x;
    var initialPageY = (pageY - (window.pageYOffset + imgProps.current.bounds.top)) * -imgProps.current.ratios.y;
    initialPageX = initialPageX + (isFullscreen ? (window.innerWidth - imgProps.current.bounds.width) / 2 : 0);
    initialPageY = initialPageY + (isFullscreen ? (window.innerHeight - imgProps.current.bounds.height) / 2 : 0);
    imgProps.current.bounds = getBounds(img.current, isFullscreen);
    imgProps.current.offsets = getOffsets(0, 0, 0, 0);
    handleDragMove({
      changedTouches: [{
        pageX: initialPageX,
        pageY: initialPageY
      }],
      preventDefault: function preventDefault() {
      },
      stopPropagation: function stopPropagation() {
      }
    });
  };
  var zoomIn = function zoomIn2(pageX, pageY) {
    setIsZoomed(true);
    currentMoveType === "drag" ? initialDrag(pageX, pageY) : initialMove(pageX, pageY);
    afterZoomIn && afterZoomIn();
  };
  var zoomOut = function zoomOut2() {
    setIsZoomed(false);
    afterZoomOut && afterZoomOut();
  };
  var getDefaults = function getDefaults2() {
    return {
      onLoadCallback: null,
      bounds: {},
      offsets: {},
      ratios: {},
      eventPosition: {},
      scaledDimensions: {}
    };
  };
  var getBounds = function getBounds2(img2, isFullscreen2) {
    if (isFullscreen2) {
      return {
        width: window.innerWidth,
        height: window.innerHeight,
        left: 0,
        top: 0
      };
    }
    return img2.getBoundingClientRect();
  };
  var getOffsets = function getOffsets2(pageX, pageY, left2, top2) {
    return {
      x: pageX - left2,
      y: pageY - top2
    };
  };
  var getRatios = function getRatios2(bounds, dimensions) {
    return {
      x: (dimensions.width - bounds.width) / bounds.width,
      y: (dimensions.height - bounds.height) / bounds.height
    };
  };
  var getFullscreenStatus = function getFullscreenStatus2(fullscreenOnMobile2, mobileBreakpoint2) {
    return fullscreenOnMobile2 && window.matchMedia && window.matchMedia("(max-width: " + mobileBreakpoint2 + "px)").matches;
  };
  var getScaledDimensions = function getScaledDimensions2(zoomImg2, zoomScale2) {
    return {
      width: zoomImg2.naturalWidth * zoomScale2,
      height: zoomImg2.naturalHeight * zoomScale2
    };
  };
  var zoomImageProps = {
    src: zoomSrc || src,
    fadeDuration: isFullscreen ? 0 : fadeDuration,
    top,
    left,
    isZoomed,
    onLoad: handleLoad,
    onDragStart: currentMoveType === "drag" ? handleDragStart : null,
    onDragEnd: currentMoveType === "drag" ? handleDragEnd : null,
    onClose: !hideCloseButton && currentMoveType === "drag" ? handleClose : null,
    onFadeOut: isFading ? handleFadeOut : null
  };
  (0, import_react4.useEffect)(function() {
    imgProps.current = getDefaults();
  }, []);
  (0, import_react4.useEffect)(function() {
    getFullscreenStatus(fullscreenOnMobile, mobileBreakpoint) && setIsActive(false);
  }, [fullscreenOnMobile, mobileBreakpoint]);
  (0, import_react4.useEffect)(function() {
    if (!zoomImg.current) {
      return;
    }
    var eventType = isTouch ? "touchmove" : "mousemove";
    if (isDragging) {
      zoomImg.current.addEventListener(eventType, handleDragMove, {
        passive: true
      });
    } else {
      zoomImg.current.removeEventListener(eventType, handleDragMove);
    }
  }, [isDragging, isTouch, handleDragMove]);
  return import_react4.default.createElement("figure", {
    className: "iiz " + (currentMoveType === "drag" ? "iiz--drag" : "") + " " + (className ? className : ""),
    style: {
      width
    },
    ref: img,
    onTouchStart: isZoomed ? null : handleTouchStart,
    onClick: handleClick,
    onMouseEnter: isTouch ? null : handleMouseEnter,
    onMouseMove: currentMoveType === "drag" || !isZoomed ? null : handleMouseMove,
    onMouseLeave: isTouch ? null : handleMouseLeave
  }, import_react4.default.createElement(Image_default, {
    src,
    sources,
    width,
    height,
    hasSpacer,
    imgAttributes,
    fadeDuration,
    isZoomed
  }), isActive && import_react4.default.createElement(import_react4.Fragment, null, isFullscreen ? import_react4.default.createElement(FullscreenPortal_default, null, import_react4.default.createElement(ZoomImage_default, zoomImageProps)) : import_react4.default.createElement(ZoomImage_default, zoomImageProps)), !hideHint && !isZoomed && import_react4.default.createElement("span", {
    className: "iiz__btn iiz__hint"
  }));
};
InnerImageZoom.propTypes = true ? {
  moveType: import_prop_types4.default.string,
  zoomType: import_prop_types4.default.string,
  src: import_prop_types4.default.string.isRequired,
  sources: import_prop_types4.default.array,
  width: import_prop_types4.default.number,
  height: import_prop_types4.default.number,
  hasSpacer: import_prop_types4.default.bool,
  imgAttributes: import_prop_types4.default.object,
  zoomSrc: import_prop_types4.default.string,
  zoomScale: import_prop_types4.default.number,
  zoomPreload: import_prop_types4.default.bool,
  fadeDuration: import_prop_types4.default.number,
  fullscreenOnMobile: import_prop_types4.default.bool,
  mobileBreakpoint: import_prop_types4.default.number,
  hideCloseButton: import_prop_types4.default.bool,
  hideHint: import_prop_types4.default.bool,
  className: import_prop_types4.default.string,
  afterZoomIn: import_prop_types4.default.func,
  afterZoomOut: import_prop_types4.default.func
} : {};
var InnerImageZoom_default = InnerImageZoom;

// node_modules/react-inner-image-zoom/es/InnerImageZoom/index.js
var InnerImageZoom_default2 = InnerImageZoom_default;

// node_modules/react-inner-image-zoom/es/index.js
var es_default = InnerImageZoom_default2;
export {
  InnerImageZoom_default2 as InnerImageZoom,
  es_default as default
};
//# sourceMappingURL=react-inner-image-zoom.js.map
